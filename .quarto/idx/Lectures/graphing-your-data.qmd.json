{"title":"Graphing Your Data","markdown":{"yaml":{"title":"Graphing Your Data","author":"Dr. Joshua Lambert","output":"html","format":{"html":{"toc":true,"toc-title":"Table of Contents","code-fold":true,"code-tools":true}}},"headingText":"Graphing Your Data","containsRefs":false,"markdown":"\n\n\n## Identifying Differences in Types of Data and How to Graph\n\n### Why Graph Data? Benefits\n\nGraphs are crucial in data analysis and presentation because they help:\n\n-   **Quick Interpretation:** Graphs provide a quick overview of data trends, making them easier to interpret than tables.\n\n-   **Pattern Identification:** They help identify patterns, relationships, and outliers.\n\n-   **Hypothesis Generation:** Aids in forming research hypotheses.\n\n-   **Audience Engagement:** Captures and maintains the audience's attention.\n\n-   **Decision Support:** Facilitates evidence-based decision-making.\n\n### Data Types\n\n1.  **Categorical Data:**\n\n    -   **Nominal:** No inherent order or ranking (e.g., coffee, tea, water).\\\n    -   **Ordinal:** Has a meaningful order or ranking (e.g., small, medium, large).\n\n    **Pros:** Easy to categorize and analyze.\\\n    **Cons:** Limited statistical techniques apply, and numerical differences are not meaningful.\n\n2.  **Continuous Data:**\n\n    -   **Interval:** Has equal intervals between values but no true zero (e.g., temperature, dates).\\\n    -   **Ratio:** Has a meaningful zero point and equal intervals (e.g., weight, strength, pressure).\n\n    **Pros:** Wide range of statistical techniques available.\\\n    **Cons:** Requires more complex handling due to scale.\n\n### Types of Graphs\n\n1.  **Univariate Graphs:**\n\n    -   **Definition:** Focuses on a single variable.\n    -   **Examples:** Histograms, Box plots.\n\n    **Pros:**\n\n    -   Simple and intuitive.\n    -   Provides distributional insights.\n\n    **Cons:**\n\n    -   Limited to understanding one variable.\n\n2.  **Bivariate Graphs:**\n\n    -   **Definition:** Displays the relationship between two variables.\n    -   **Examples:** Scatter plots, Box plots.\n\n    **Pros:**\n\n    -   Useful for studying relationships and trends.\n\n    **Cons:**\n\n    -   Might not reveal hidden multivariate trends.\n\n3.  **Multivariate Graphs:**\n\n    -   **Definition:** Involves multiple variables.\n    -   **Examples:** Scatter plot matrices, Mosaic plots, Treemaps.\n\n    **Pros:**\n\n    -   Effective for uncovering complex relationships.\n\n    **Cons:**\n\n    -   Interpretation can be challenging without proper labels.\n\n## Stephen Few's Graphic Data Display Key Points\n\n-   **Know Your Audience:** Understand how your audience processes information to tailor your visualizations effectively.\n-   **Define Your Message:** Clearly convey your message simply and quickly.\n-   **Use Visual Elements Appropriately:** Combine words, numbers, and images meaningfully.\n-   **Principles of Excellence:** Based on Edward Tufte's principles of good graphical design:\n    -   **Enforce Visual Comparisons:** Allow comparisons between data points.\n    -   **Show Causality:** Highlight causal relationships if possible.\n    -   **Integrate All Visual Elements:** Include relevant text and numbers to provide context.\n    -   **Content-Driven Design:** Ensure design is driven by data quality, relevance, and integrity.\n\n## Principles of Good and Bad Graphical Design\n\n### Tips and Tricks\n\n-   **Graphical Excellence:**\n    -   **Show Multivariate Data:** Present data across multiple dimensions.\n    -   **Integrate All Visual Elements:** Include text, numbers, and images cohesively.\n    -   **Use Quality, Relevant, and Honest Data:** Ensure data integrity and honesty.\n-   **Common Mistakes:**\n    -   **Distorting Data Meaning:** Misleading visuals distort interpretation.\n    -   **Incorrect Scaling:** Scaling errors can misrepresent data trends.\n    -   **Poor Data-to-Ink Ratio:** Avoid excessive chart junk that doesn't add value.\n\n[The 27 Worst Charts Of All Time](https://www.businessinsider.com/the-27-worst-charts-of-all-time-2013-6#unordered-perplexingly-circular-and-difficult-to-ascertain-any-information-from-this-globe-and-mail-chart-they-went-out-of-their-way-to-make-this-flashy-but-difficult-to-actually-read-we-get-what-they-were-going-for-but-this-chart-is-precisely-why-humanity-invented-tables-6)\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FcllfpC7kAY\" frameborder=\"0\" allowfullscreen>\n\n</iframe>\n\n## Graph Types and How to Use Them\n\n### Histogram\n\n```{r, echo=FALSE, message=FALSE}\n  # Create a histogram in R\n        data <- rnorm(100)\n        hist(data, main = \"Histogram of Data\", xlab = \"Values\", col = \"blue\", border = \"black\")\n```\n\n-   **Definition:** Graphical representation of data distribution using bins of equal length to count frequencies.\n-   **Pros:**\n    -   Helps visualize the distribution shape.\n    -   Easy to compare different distributions.\n    -   Identifies outliers and skewness.\n-   **Cons:**\n    -   Bin size selection can lead to over or under-smoothing.\n    -   Not suitable for small data sets.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Analyze</code> \\> <code>Distribution</code>.</li>\n\n<li>Select your continuous variable and move it to the <code>Y</code> column.</li>\n\n<li>Click <code>OK</code>.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a histogram in R\n        data <- rnorm(100)\n        hist(data, main = \"Histogram of Data\", xlab = \"Values\", col = \"blue\", border = \"black\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.normal(50, 10, 1000)\nplt.hist(data, bins=15, color='blue')\nplt.title(\"Histogram Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /HISTOGRAM=Age\n          /TITLE='Histogram Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 1000\n        generate age = rnormal(50, 10)\n        hist age, bin(15) color(blue)\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Box Plot\n\n```{r, echo=FALSE, message=FALSE}\n # Create a box plot in R\n        data <- rnorm(100)\n        boxplot(data, main = \"Box Plot Example\")\n```\n\n-   **Definition:** Graphically represents data distribution based on quartiles, highlighting outliers, median, and spread.\n-   **Pros:**\n    -   Effective for identifying outliers.\n    -   Compares multiple groups easily.\n    -   Robust to non-normal data.\n-   **Cons:**\n    -   Less informative for small data sets.\n    -   Not ideal for displaying multimodal distributions.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your continuous variable to the <code>Y</code> axis.</li>\n\n<li>Drag your categorical variable to the <code>X</code> axis.</li>\n\n<li>Select <code>Box Plot</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a box plot in R\n        data <- rnorm(100)\n        boxplot(data, main = \"Box Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.normal(50, 10, 100)\nplt.boxplot(data)\nplt.title(\"Box Plot Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /BOXPLOT=VARIABLES(Age)\n          /TITLE='Box Plot Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 100\n        generate age = rnormal(50, 10)\n        graph box age, title(\"Box Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Pie Chart\n\n```{r, echo=FALSE, message=FALSE}\n # Create a pie chart in R\n        values <- c(10, 20, 30, 40)\n        labels <- c(\"A\", \"B\", \"C\", \"D\")\n        pie(values, labels = labels, main = \"Pie Chart Example\")\n```\n\n-   **Definition:** Displays relative proportions in part-to-whole relationships using slices of a circle.\n-   **Pros:**\n    -   Visually intuitive.\n    -   Effective for simple categorical data.\n-   **Cons:**\n    -   Difficult to compare proportions across different charts.\n    -   Not suitable for large numbers of categories.\n    -   Can distort differences due to angle perception issues.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your categorical variable to the <code>X</code> axis.</li>\n\n<li>Select <code>Pie Chart</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a pie chart in R\n        values <- c(10, 20, 30, 40)\n        labels <- c(\"A\", \"B\", \"C\", \"D\")\n        pie(values, labels = labels, main = \"Pie Chart Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\n\nvalues = [10, 20, 30, 40]\nlabels = [\"A\", \"B\", \"C\", \"D\"]\nplt.pie(values, labels=labels)\nplt.title(\"Pie Chart Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          EXAMINE VARIABLES=age\n          /COMPARE\n          /PLOT=BOXPLOT\n          /STATISTICS=NONE\n          /NOTOTAL\n          /TITLE='Pie Chart Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 4\n        generate group = _n\n        generate value = 10 * group\n        graph pie value, over(group) title(\"Pie Chart Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Scatter Plot\n\n```{r, echo=FALSE, message=FALSE}\n# Create a scatter plot in R\n        x <- rnorm(100)\n        y <- rnorm(100)\n        plot(x, y, main = \"Scatter Plot Example\", xlab = \"X-axis\", ylab = \"Y-axis\")\n```\n\n-   **Definition:** Shows the relationship between two continuous variables.\n-   **Pros:**\n    -   Identifies correlations and relationships between variables.\n    -   Highlights clusters and patterns.\n    -   Detects outliers effectively.\n-   **Cons:**\n    -   Can suffer from overplotting with large data sets.\n    -   Requires understanding of correlation interpretation.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your first continuous variable to the <code>X</code> axis.</li>\n\n<li>Drag your second continuous variable to the <code>Y</code> axis.</li>\n\n<li>Select <code>Scatter Plot</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a scatter plot in R\n        x <- rnorm(100)\n        y <- rnorm(100)\n        plot(x, y, main = \"Scatter Plot Example\", xlab = \"X-axis\", ylab = \"Y-axis\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.normal(50, 10, 100)\ny = np.random.normal(50, 10, 100)\nplt.scatter(x, y)\nplt.title(\"Scatter Plot Example\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /SCATTERPLOT(BIVAR)=income WITH age\n          /MISSING=LISTWISE.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 100\n        generate age = rnormal(50, 10)\n        generate income = rnormal(50, 10)\n        scatter age income, title(\"Scatter Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Mosaic Plot\n\n```{r, echo=FALSE, message=FALSE}\n# Load the Titanic dataset\ndata(Titanic)\n\nmosaicplot(~ Sex +Survived, data = Titanic, color = TRUE)\n\n```\n\n-   **Definition:** Displays the relationships between two or more categorical variables using a stacked rectangle visualization.\n-   **Pros:**\n    -   Effective for identifying associations in contingency tables.\n    -   Highlights interactions between variables.\n-   **Cons:**\n    -   Interpretation can be challenging for complex relationships.\n    -   Less intuitive than simpler visualizations.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Analyze</code> \\> <code>Fit Y by X</code>.</li>\n\n<li>Select your response variable and move it to the <code>Y</code> column.</li>\n\n<li>Select your explanatory variable and move it to the <code>X</code> column.</li>\n\n<li>Click <code>OK</code>.</li>\n\n<li>Click the red triangle and select <code>Mosaic Plot</code>.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a mosaic plot in R\n        library(vcd)\n        data(Titanic)\n        mosaic(Titanic, shade = TRUE, legend = TRUE)\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        import matplotlib.pyplot as plt\n        from statsmodels.graphics.mosaicplot import mosaic\n\n        data = {'Class A': 40, 'Class B': 30, 'Class C': 20, 'Class D': 10}\n        mosaic(data, title='Mosaic Plot Example')\n        plt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /MOSAICPLOT=VARIABLES(Class, Survival)\n          /TITLE='Mosaic Plot Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 4\n        generate class = _n\n        generate survival = 10 * class\n        graph mosaic class survival, title(\"Mosaic Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Bar/Column Chart\n\n```{r, echo=FALSE, message=FALSE}\n# Create a bar chart in R\n        categories <- c(\"A\", \"B\", \"C\", \"D\")\n        values <- c(10, 20, 30, 40)\n        barplot(values, names.arg = categories, main = \"Bar Chart Example\", col = \"blue\")\n```\n\n-   **Definition:** A bar or column chart compares data across categories using rectangular bars, where each bar's length represents the value or frequency of a category. The bars can be vertical (column chart) or horizontal (bar chart).\n\n-   **Pros:**\n\n    -   **Easily Compares Data:**\n        -   Makes it simple to compare data across different categories.\n        -   Highlights significant differences between groups.\n    -   **Quick Insight:**\n        -   Provides immediate visual insights into category differences.\n        -   Suitable for presenting data to non-technical audiences.\n    -   **Intuitive Interpretation:**\n        -   Clear and straightforward representation.\n        -   Suitable for a wide range of audiences due to its intuitive nature.\n    -   **Flexibility:**\n        -   Can represent both frequency (count data) and summary statistics (e.g., means, medians).\n        -   Can be customized with different bar colors, stacking, grouping, etc.\n\n-   **Cons:**\n\n    -   **Misleading Scaling:**\n        -   Can mislead if bar lengths, axis scales, or data representations are inconsistent.\n        -   Improper axis truncation may exaggerate or minimize differences.\n    -   **Overloading with Categories:**\n        -   Too many categories can clutter the chart, making it hard to interpret.\n        -   Limited space can lead to overlapping labels, hindering readability.\n    -   **Not Ideal for Continuous Data:**\n        -   Works best with categorical data but not suitable for continuous variables.\n        -   Summarizing continuous data into categories can lead to loss of detail or oversimplification.\n    -   **Chart Junk:**\n        -   Excessive use of gridlines, 3D effects, or non-data elements can lead to \"chart junk,\" distracting from the data itself.\n    -   **Data-to-Ink Ratio:**\n        -   Low data-to-ink ratio due to large bars relative to the actual information conveyed.\n\n**Summary:**\\\nBar/column charts are highly effective for comparing categorical data and highlighting category differences. However, careful attention to scaling and data representation is crucial to ensure accurate and clear visualization.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your categorical variable to the <code>X</code> axis.</li>\n\n<li>Drag your continuous variable to the <code>Y</code> axis.</li>\n\n<li>Select <code>Bar Chart</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a bar chart in R\n        categories <- c(\"A\", \"B\", \"C\", \"D\")\n        values <- c(10, 20, 30, 40)\n        barplot(values, names.arg = categories, main = \"Bar Chart Example\", col = \"blue\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\n\ncategories = [\"A\", \"B\", \"C\", \"D\"]\nvalues = [10, 20, 30, 40]\nplt.bar(categories, values, color='blue')\nplt.title(\"Bar Chart Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /BAR(GROUPED)=VALUE BY CATEGORY\n          /TITLE='Bar Chart Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 4\n        generate category = _n\n        generate value = 10 * category\n        graph bar value, over(category) title(\"Bar Chart Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Quantile Plot\n\n```{r, echo=FALSE, message=FALSE}\n # Create a quantile plot in R\n        data <- rnorm(100)\n        qqnorm(data)\n        qqline(data, col = \"blue\")\n```\n\n-   **Definition:** Displays cumulative quantiles of a distribution versus expected quantiles (e.g., normal distribution).\n\n-   **Pros:**\n\n    -   **Identifies Distribution Deviations:**\n        -   Clearly shows deviations of data distribution from a theoretical distribution.\n    -   **Efficient Distribution Fit Determination:**\n        -   Quickly determines whether the data fits a specific distribution.\n\n-   **Cons:**\n\n    -   **Requires Statistical Knowledge:**\n        -   Accurate interpretation requires understanding quantile statistics.\n    -   **Less Intuitive:**\n        -   Less intuitive than histograms or box plots for non-technical audiences.\n\n**Summary:**\\\nQuantile plots are ideal for identifying distribution deviations from theoretical distributions. However, they require statistical knowledge for accurate interpretation and might be less intuitive than other visualization techniques.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Analyze</code> \\> <code>Distribution</code>.</li>\n\n<li>Select your continuous variable and move it to the <code>Y</code> column.</li>\n\n<li>Click <code>OK</code>.</li>\n\n<li>Click the red triangle and select <code>Normal Quantile Plot</code>.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a quantile plot in R\n        data <- rnorm(100)\n        qqnorm(data)\n        qqline(data, col = \"blue\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\ndata = np.random.normal(50, 10, 100)\nstats.probplot(data, dist=\"norm\", plot=plt)\nplt.title(\"Quantile Plot Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        Q-QPLOT VARIABLES=Age\n          /DISTRIBUTION=NORMAL.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 100\n        generate age = rnormal(50, 10)\n        qnorm age, title(\"Quantile Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Treemap\n\n```{r, echo=FALSE, message=FALSE}\n# Create a treemap in R\n        library(treemap)\n        \n        data <- data.frame(\n          category = c(\"A\", \"B\", \"C\", \"D\"),\n          subcategory = c(\"A1\", \"B1\", \"C1\", \"D1\"),\n          value = c(10, 20, 30, 40)\n        )\n        \n        treemap(\n          data,\n          index = c(\"category\", \"subcategory\"),\n          vSize = \"value\",\n          title = \"Treemap Example\"\n        )\n```\n\n-   **Definition:** Visualizes hierarchical data using nested rectangles.\n\n-   **Pros:**\n\n    -   **Displays Large Amounts of Data Efficiently:**\n        -   Suitable for representing large hierarchical data sets.\n    -   **Intuitive for Showing Hierarchical Relationships:**\n        -   Clearly shows hierarchical relationships in a visual format.\n    -   **Highlights Patterns and Clusters Visually:**\n        -   Highlights patterns, clusters, and outliers effectively.\n\n-   **Cons:**\n\n    -   **Distorts Proportions if Sizes are Too Small:**\n        -   Smaller rectangles can become unreadable and distort proportions.\n    -   **Challenging to Interpret for High-Depth Hierarchies:**\n        -   Deep hierarchies can make interpretation challenging and confusing.\n\n**Summary:**\\\nTreemaps are excellent for visualizing hierarchical data efficiently and intuitively. However, careful design is crucial to avoid distortions and ensure interpretability, especially with deep hierarchies.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your categorical variable to the <code>X</code> axis.</li>\n\n<li>Drag your continuous variable to the <code>Y</code> axis.</li>\n\n<li>Select <code>Treemap</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a treemap in R\n        library(treemap)\n        \n        data <- data.frame(\n          category = c(\"A\", \"B\", \"C\", \"D\"),\n          subcategory = c(\"A1\", \"B1\", \"C1\", \"D1\"),\n          value = c(10, 20, 30, 40)\n        )\n        \n        treemap(\n          data,\n          index = c(\"category\", \"subcategory\"),\n          vSize = \"value\",\n          title = \"Treemap Example\"\n        )\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\nimport squarify\n\nlabels = [\"A\", \"B\", \"C\", \"D\"]\nsizes = [10, 20, 30, 40]\nsquarify.plot(sizes=sizes, label=labels, color=[\"blue\", \"green\", \"red\", \"purple\"], alpha=.7)\nplt.title(\"Treemap Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /TREEMAP=VARIABLES(Category, Subcategory)\n          /VALUE=Value\n          /TITLE='Treemap Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        ssc install treemap\n        clear\n        set obs 4\n        generate category = _n\n        generate subcategory = category\n        generate value = 10 * category\n        treemap value, by(category subcategory) title(\"Treemap Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n## Advanced Graphs\n\n### Time Series Plots\n\n```{r, echo=FALSE, message=FALSE}\n       # Create a time series plot in R\n        time <- seq(from = as.Date(\"2022-01-01\"), by = \"month\", length.out = 12)\n        values <- rnorm(12, mean = 50, sd = 10)\n        plot(time, values, type = \"l\", main = \"Time Series Plot Example\")\n```\n\n-   **Definition:** Displays data trends over time.\n-   **Pros:**\n    -   Ideal for identifying trends, cycles, and seasonal patterns.\n    -   Supports multiple time series on the same graph.\n    -   Facilitates forecasting and future planning.\n-   **Cons:**\n    -   Less effective for non-temporal data.\n    -   Can suffer from overplotting with too many series.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Analyze</code> \\> <code> Specialized Modeling<code> \\> <code>Time Series</code>.</li>\n\n<li>Select your time variable and move it to the <code>X, Time ID</code> column.</li>\n\n<li>Select your response variable and move it to the <code>Y, Time Series </code> column.</li>\n\n<li>Click <code>OK</code>.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a time series plot in R\n        time <- seq(from = as.Date(\"2022-01-01\"), by = \"month\", length.out = 12)\n        values <- rnorm(12, mean = 50, sd = 10)\n        plot(time, values, type = \"l\", main = \"Time Series Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ntime = pd.date_range('2022-01-01', periods=12, freq='M')\nvalues = np.random.normal(50, 10, 12)\nplt.plot(time, values)\nplt.title(\"Time Series Plot Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        TSPLOT\n          /TIME=Date\n          /SERIES=Value\n          /TITLE='Time Series Plot Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 12\n        generate time = tq(2022q1)\n        generate value = rnormal(50, 10)\n        tsset time\n        tsline value, title(\"Time Series Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Maps\n\n```{r, echo=FALSE, message=FALSE}\n# Create a map in R\n        library(ggplot2)\n        library(maps)\n\n        world_map <- map_data(\"world\")\n        ggplot(world_map, aes(x = long, y = lat, group = group)) +\n          geom_polygon(fill = \"lightblue\", color = \"white\") +\n          ggtitle(\"World Map Example\")\n```\n\n-   **Definition:** Visualizes geographic data by plotting locations on maps.\n-   **Pros:**\n    -   Provides spatial context to data.\n    -   Effective for highlighting geographic patterns.\n    -   Supports data aggregation at regional levels.\n-   **Cons:**\n    -   Interpretation can be misleading without proper scaling.\n    -   Requires geographic knowledge for accurate interpretation.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your longitude and latitude variables to the <code>X</code> and <code>Y</code> axes, respectively.</li>\n\n<li>Select <code>Map</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a map in R\n        library(ggplot2)\n        library(maps)\n\n        world_map <- map_data(\"world\")\n        ggplot(world_map, aes(x = long, y = lat, group = group)) +\n          geom_polygon(fill = \"lightblue\", color = \"white\") +\n          ggtitle(\"World Map Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld.plot()\nplt.title(\"World Map Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        MAP\n          /MAPTYPE=world\n          /TITLE='World Map Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        ssc install spmap\n        clear\n        sysuse world\n        spmap using world_coordinates, title(\"World Map Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Unstructured Text\n\n#### Word Cloud Example\n\n<!-- ```{r, echo=FALSE, message=FALSE} -->\n\n<!-- # Summarize unstructured text in R -->\n\n<!--         library(tm) -->\n\n<!--         library(wordcloud) -->\n\n<!--         text <- c(\"sepsis\", \"infection\", \"fever\", \"hospital\", \"antibiotics\",  -->\n\n<!--           \"bacteria\", \"blood\", \"severe\", \"septic shock\", \"intensive care\") -->\n\n<!--         # Repeat each word a random number of times -->\n\n<!--         text_repeated <- unlist(lapply(text, function(word) rep(word, sample(5:15, 1)))) -->\n\n<!--         corpus <- Corpus(VectorSource(text_repeated)) -->\n\n<!--         tdm <- TermDocumentMatrix(corpus) -->\n\n<!--         word_freq <- sort(rowSums(as.matrix(tdm)), decreasing = TRUE) -->\n\n<!--         wordcloud(names(word_freq), word_freq, scale = c(3, 0.5), colors = brewer.pal(8, \"Dark2\")) -->\n\n<!-- ``` -->\n\n-   **Definition:** Summarizes text data numerically to gain insights.\n-   **Pros:**\n    -   Extracts useful information from textual data.\n    -   Identifies patterns and trends in large text corpora.\n    -   Supports topic modeling and sentiment analysis.\n-   **Cons:**\n    -   Requires preprocessing to handle noise and inconsistencies.\n    -   Interpretation challenges due to language ambiguities.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Analyze</code> \\> <code>Text Explorer</code>.</li>\n\n<li>Select your text variable and move it to the <code>Text</code> column.</li>\n\n<li>Click <code>OK</code>.</li>\n\n<li>Click the red triangle and select <code> Display Options <code> \\> <code> Show Word Cloud.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Summarize unstructured text in R\n        library(tm)\n        library(wordcloud)\n\n        text <- c(\"word1\", \"word2\", \"word3\", \"word1\", \"word2\")\n        corpus <- Corpus(VectorSource(text))\n        tdm <- TermDocumentMatrix(corpus)\n        word_freq <- sort(rowSums(as.matrix(tdm)), decreasing = TRUE)\n        wordcloud(names(word_freq), word_freq, scale = c(3, 0.5), colors = brewer.pal(8, \"Dark2\"))\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ntext = \"word1 word2 word3 word1 word2\"\nwordcloud = WordCloud(scale=3, max_words=50, background_color='white').generate(text)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        TEXTANALYSIS\n          /TEXT=Comments\n          /TITLE='Unstructured Text Analysis Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 5\n        generate comments = \"word1 word2 word3 word1 word2\"\n        wordcloud comments, maxwords(50)\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### References\n\n1.  Tufte, Edward R. *The Visual Display of Quantitative Information*. Graphics Press, 2001.\n2.  Few, Stephen. *Now You See It: Simple Visualization Techniques for Quantitative Analysis*. Analytics Press, 2009.\n","srcMarkdownNoYaml":"\n\n# Graphing Your Data\n\n## Identifying Differences in Types of Data and How to Graph\n\n### Why Graph Data? Benefits\n\nGraphs are crucial in data analysis and presentation because they help:\n\n-   **Quick Interpretation:** Graphs provide a quick overview of data trends, making them easier to interpret than tables.\n\n-   **Pattern Identification:** They help identify patterns, relationships, and outliers.\n\n-   **Hypothesis Generation:** Aids in forming research hypotheses.\n\n-   **Audience Engagement:** Captures and maintains the audience's attention.\n\n-   **Decision Support:** Facilitates evidence-based decision-making.\n\n### Data Types\n\n1.  **Categorical Data:**\n\n    -   **Nominal:** No inherent order or ranking (e.g., coffee, tea, water).\\\n    -   **Ordinal:** Has a meaningful order or ranking (e.g., small, medium, large).\n\n    **Pros:** Easy to categorize and analyze.\\\n    **Cons:** Limited statistical techniques apply, and numerical differences are not meaningful.\n\n2.  **Continuous Data:**\n\n    -   **Interval:** Has equal intervals between values but no true zero (e.g., temperature, dates).\\\n    -   **Ratio:** Has a meaningful zero point and equal intervals (e.g., weight, strength, pressure).\n\n    **Pros:** Wide range of statistical techniques available.\\\n    **Cons:** Requires more complex handling due to scale.\n\n### Types of Graphs\n\n1.  **Univariate Graphs:**\n\n    -   **Definition:** Focuses on a single variable.\n    -   **Examples:** Histograms, Box plots.\n\n    **Pros:**\n\n    -   Simple and intuitive.\n    -   Provides distributional insights.\n\n    **Cons:**\n\n    -   Limited to understanding one variable.\n\n2.  **Bivariate Graphs:**\n\n    -   **Definition:** Displays the relationship between two variables.\n    -   **Examples:** Scatter plots, Box plots.\n\n    **Pros:**\n\n    -   Useful for studying relationships and trends.\n\n    **Cons:**\n\n    -   Might not reveal hidden multivariate trends.\n\n3.  **Multivariate Graphs:**\n\n    -   **Definition:** Involves multiple variables.\n    -   **Examples:** Scatter plot matrices, Mosaic plots, Treemaps.\n\n    **Pros:**\n\n    -   Effective for uncovering complex relationships.\n\n    **Cons:**\n\n    -   Interpretation can be challenging without proper labels.\n\n## Stephen Few's Graphic Data Display Key Points\n\n-   **Know Your Audience:** Understand how your audience processes information to tailor your visualizations effectively.\n-   **Define Your Message:** Clearly convey your message simply and quickly.\n-   **Use Visual Elements Appropriately:** Combine words, numbers, and images meaningfully.\n-   **Principles of Excellence:** Based on Edward Tufte's principles of good graphical design:\n    -   **Enforce Visual Comparisons:** Allow comparisons between data points.\n    -   **Show Causality:** Highlight causal relationships if possible.\n    -   **Integrate All Visual Elements:** Include relevant text and numbers to provide context.\n    -   **Content-Driven Design:** Ensure design is driven by data quality, relevance, and integrity.\n\n## Principles of Good and Bad Graphical Design\n\n### Tips and Tricks\n\n-   **Graphical Excellence:**\n    -   **Show Multivariate Data:** Present data across multiple dimensions.\n    -   **Integrate All Visual Elements:** Include text, numbers, and images cohesively.\n    -   **Use Quality, Relevant, and Honest Data:** Ensure data integrity and honesty.\n-   **Common Mistakes:**\n    -   **Distorting Data Meaning:** Misleading visuals distort interpretation.\n    -   **Incorrect Scaling:** Scaling errors can misrepresent data trends.\n    -   **Poor Data-to-Ink Ratio:** Avoid excessive chart junk that doesn't add value.\n\n[The 27 Worst Charts Of All Time](https://www.businessinsider.com/the-27-worst-charts-of-all-time-2013-6#unordered-perplexingly-circular-and-difficult-to-ascertain-any-information-from-this-globe-and-mail-chart-they-went-out-of-their-way-to-make-this-flashy-but-difficult-to-actually-read-we-get-what-they-were-going-for-but-this-chart-is-precisely-why-humanity-invented-tables-6)\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FcllfpC7kAY\" frameborder=\"0\" allowfullscreen>\n\n</iframe>\n\n## Graph Types and How to Use Them\n\n### Histogram\n\n```{r, echo=FALSE, message=FALSE}\n  # Create a histogram in R\n        data <- rnorm(100)\n        hist(data, main = \"Histogram of Data\", xlab = \"Values\", col = \"blue\", border = \"black\")\n```\n\n-   **Definition:** Graphical representation of data distribution using bins of equal length to count frequencies.\n-   **Pros:**\n    -   Helps visualize the distribution shape.\n    -   Easy to compare different distributions.\n    -   Identifies outliers and skewness.\n-   **Cons:**\n    -   Bin size selection can lead to over or under-smoothing.\n    -   Not suitable for small data sets.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Analyze</code> \\> <code>Distribution</code>.</li>\n\n<li>Select your continuous variable and move it to the <code>Y</code> column.</li>\n\n<li>Click <code>OK</code>.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a histogram in R\n        data <- rnorm(100)\n        hist(data, main = \"Histogram of Data\", xlab = \"Values\", col = \"blue\", border = \"black\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.normal(50, 10, 1000)\nplt.hist(data, bins=15, color='blue')\nplt.title(\"Histogram Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /HISTOGRAM=Age\n          /TITLE='Histogram Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 1000\n        generate age = rnormal(50, 10)\n        hist age, bin(15) color(blue)\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Box Plot\n\n```{r, echo=FALSE, message=FALSE}\n # Create a box plot in R\n        data <- rnorm(100)\n        boxplot(data, main = \"Box Plot Example\")\n```\n\n-   **Definition:** Graphically represents data distribution based on quartiles, highlighting outliers, median, and spread.\n-   **Pros:**\n    -   Effective for identifying outliers.\n    -   Compares multiple groups easily.\n    -   Robust to non-normal data.\n-   **Cons:**\n    -   Less informative for small data sets.\n    -   Not ideal for displaying multimodal distributions.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your continuous variable to the <code>Y</code> axis.</li>\n\n<li>Drag your categorical variable to the <code>X</code> axis.</li>\n\n<li>Select <code>Box Plot</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a box plot in R\n        data <- rnorm(100)\n        boxplot(data, main = \"Box Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.normal(50, 10, 100)\nplt.boxplot(data)\nplt.title(\"Box Plot Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /BOXPLOT=VARIABLES(Age)\n          /TITLE='Box Plot Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 100\n        generate age = rnormal(50, 10)\n        graph box age, title(\"Box Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Pie Chart\n\n```{r, echo=FALSE, message=FALSE}\n # Create a pie chart in R\n        values <- c(10, 20, 30, 40)\n        labels <- c(\"A\", \"B\", \"C\", \"D\")\n        pie(values, labels = labels, main = \"Pie Chart Example\")\n```\n\n-   **Definition:** Displays relative proportions in part-to-whole relationships using slices of a circle.\n-   **Pros:**\n    -   Visually intuitive.\n    -   Effective for simple categorical data.\n-   **Cons:**\n    -   Difficult to compare proportions across different charts.\n    -   Not suitable for large numbers of categories.\n    -   Can distort differences due to angle perception issues.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your categorical variable to the <code>X</code> axis.</li>\n\n<li>Select <code>Pie Chart</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a pie chart in R\n        values <- c(10, 20, 30, 40)\n        labels <- c(\"A\", \"B\", \"C\", \"D\")\n        pie(values, labels = labels, main = \"Pie Chart Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\n\nvalues = [10, 20, 30, 40]\nlabels = [\"A\", \"B\", \"C\", \"D\"]\nplt.pie(values, labels=labels)\nplt.title(\"Pie Chart Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          EXAMINE VARIABLES=age\n          /COMPARE\n          /PLOT=BOXPLOT\n          /STATISTICS=NONE\n          /NOTOTAL\n          /TITLE='Pie Chart Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 4\n        generate group = _n\n        generate value = 10 * group\n        graph pie value, over(group) title(\"Pie Chart Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Scatter Plot\n\n```{r, echo=FALSE, message=FALSE}\n# Create a scatter plot in R\n        x <- rnorm(100)\n        y <- rnorm(100)\n        plot(x, y, main = \"Scatter Plot Example\", xlab = \"X-axis\", ylab = \"Y-axis\")\n```\n\n-   **Definition:** Shows the relationship between two continuous variables.\n-   **Pros:**\n    -   Identifies correlations and relationships between variables.\n    -   Highlights clusters and patterns.\n    -   Detects outliers effectively.\n-   **Cons:**\n    -   Can suffer from overplotting with large data sets.\n    -   Requires understanding of correlation interpretation.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your first continuous variable to the <code>X</code> axis.</li>\n\n<li>Drag your second continuous variable to the <code>Y</code> axis.</li>\n\n<li>Select <code>Scatter Plot</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a scatter plot in R\n        x <- rnorm(100)\n        y <- rnorm(100)\n        plot(x, y, main = \"Scatter Plot Example\", xlab = \"X-axis\", ylab = \"Y-axis\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.normal(50, 10, 100)\ny = np.random.normal(50, 10, 100)\nplt.scatter(x, y)\nplt.title(\"Scatter Plot Example\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /SCATTERPLOT(BIVAR)=income WITH age\n          /MISSING=LISTWISE.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 100\n        generate age = rnormal(50, 10)\n        generate income = rnormal(50, 10)\n        scatter age income, title(\"Scatter Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Mosaic Plot\n\n```{r, echo=FALSE, message=FALSE}\n# Load the Titanic dataset\ndata(Titanic)\n\nmosaicplot(~ Sex +Survived, data = Titanic, color = TRUE)\n\n```\n\n-   **Definition:** Displays the relationships between two or more categorical variables using a stacked rectangle visualization.\n-   **Pros:**\n    -   Effective for identifying associations in contingency tables.\n    -   Highlights interactions between variables.\n-   **Cons:**\n    -   Interpretation can be challenging for complex relationships.\n    -   Less intuitive than simpler visualizations.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Analyze</code> \\> <code>Fit Y by X</code>.</li>\n\n<li>Select your response variable and move it to the <code>Y</code> column.</li>\n\n<li>Select your explanatory variable and move it to the <code>X</code> column.</li>\n\n<li>Click <code>OK</code>.</li>\n\n<li>Click the red triangle and select <code>Mosaic Plot</code>.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a mosaic plot in R\n        library(vcd)\n        data(Titanic)\n        mosaic(Titanic, shade = TRUE, legend = TRUE)\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        import matplotlib.pyplot as plt\n        from statsmodels.graphics.mosaicplot import mosaic\n\n        data = {'Class A': 40, 'Class B': 30, 'Class C': 20, 'Class D': 10}\n        mosaic(data, title='Mosaic Plot Example')\n        plt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /MOSAICPLOT=VARIABLES(Class, Survival)\n          /TITLE='Mosaic Plot Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 4\n        generate class = _n\n        generate survival = 10 * class\n        graph mosaic class survival, title(\"Mosaic Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Bar/Column Chart\n\n```{r, echo=FALSE, message=FALSE}\n# Create a bar chart in R\n        categories <- c(\"A\", \"B\", \"C\", \"D\")\n        values <- c(10, 20, 30, 40)\n        barplot(values, names.arg = categories, main = \"Bar Chart Example\", col = \"blue\")\n```\n\n-   **Definition:** A bar or column chart compares data across categories using rectangular bars, where each bar's length represents the value or frequency of a category. The bars can be vertical (column chart) or horizontal (bar chart).\n\n-   **Pros:**\n\n    -   **Easily Compares Data:**\n        -   Makes it simple to compare data across different categories.\n        -   Highlights significant differences between groups.\n    -   **Quick Insight:**\n        -   Provides immediate visual insights into category differences.\n        -   Suitable for presenting data to non-technical audiences.\n    -   **Intuitive Interpretation:**\n        -   Clear and straightforward representation.\n        -   Suitable for a wide range of audiences due to its intuitive nature.\n    -   **Flexibility:**\n        -   Can represent both frequency (count data) and summary statistics (e.g., means, medians).\n        -   Can be customized with different bar colors, stacking, grouping, etc.\n\n-   **Cons:**\n\n    -   **Misleading Scaling:**\n        -   Can mislead if bar lengths, axis scales, or data representations are inconsistent.\n        -   Improper axis truncation may exaggerate or minimize differences.\n    -   **Overloading with Categories:**\n        -   Too many categories can clutter the chart, making it hard to interpret.\n        -   Limited space can lead to overlapping labels, hindering readability.\n    -   **Not Ideal for Continuous Data:**\n        -   Works best with categorical data but not suitable for continuous variables.\n        -   Summarizing continuous data into categories can lead to loss of detail or oversimplification.\n    -   **Chart Junk:**\n        -   Excessive use of gridlines, 3D effects, or non-data elements can lead to \"chart junk,\" distracting from the data itself.\n    -   **Data-to-Ink Ratio:**\n        -   Low data-to-ink ratio due to large bars relative to the actual information conveyed.\n\n**Summary:**\\\nBar/column charts are highly effective for comparing categorical data and highlighting category differences. However, careful attention to scaling and data representation is crucial to ensure accurate and clear visualization.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your categorical variable to the <code>X</code> axis.</li>\n\n<li>Drag your continuous variable to the <code>Y</code> axis.</li>\n\n<li>Select <code>Bar Chart</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a bar chart in R\n        categories <- c(\"A\", \"B\", \"C\", \"D\")\n        values <- c(10, 20, 30, 40)\n        barplot(values, names.arg = categories, main = \"Bar Chart Example\", col = \"blue\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\n\ncategories = [\"A\", \"B\", \"C\", \"D\"]\nvalues = [10, 20, 30, 40]\nplt.bar(categories, values, color='blue')\nplt.title(\"Bar Chart Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /BAR(GROUPED)=VALUE BY CATEGORY\n          /TITLE='Bar Chart Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 4\n        generate category = _n\n        generate value = 10 * category\n        graph bar value, over(category) title(\"Bar Chart Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Quantile Plot\n\n```{r, echo=FALSE, message=FALSE}\n # Create a quantile plot in R\n        data <- rnorm(100)\n        qqnorm(data)\n        qqline(data, col = \"blue\")\n```\n\n-   **Definition:** Displays cumulative quantiles of a distribution versus expected quantiles (e.g., normal distribution).\n\n-   **Pros:**\n\n    -   **Identifies Distribution Deviations:**\n        -   Clearly shows deviations of data distribution from a theoretical distribution.\n    -   **Efficient Distribution Fit Determination:**\n        -   Quickly determines whether the data fits a specific distribution.\n\n-   **Cons:**\n\n    -   **Requires Statistical Knowledge:**\n        -   Accurate interpretation requires understanding quantile statistics.\n    -   **Less Intuitive:**\n        -   Less intuitive than histograms or box plots for non-technical audiences.\n\n**Summary:**\\\nQuantile plots are ideal for identifying distribution deviations from theoretical distributions. However, they require statistical knowledge for accurate interpretation and might be less intuitive than other visualization techniques.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Analyze</code> \\> <code>Distribution</code>.</li>\n\n<li>Select your continuous variable and move it to the <code>Y</code> column.</li>\n\n<li>Click <code>OK</code>.</li>\n\n<li>Click the red triangle and select <code>Normal Quantile Plot</code>.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a quantile plot in R\n        data <- rnorm(100)\n        qqnorm(data)\n        qqline(data, col = \"blue\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\ndata = np.random.normal(50, 10, 100)\nstats.probplot(data, dist=\"norm\", plot=plt)\nplt.title(\"Quantile Plot Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        Q-QPLOT VARIABLES=Age\n          /DISTRIBUTION=NORMAL.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 100\n        generate age = rnormal(50, 10)\n        qnorm age, title(\"Quantile Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Treemap\n\n```{r, echo=FALSE, message=FALSE}\n# Create a treemap in R\n        library(treemap)\n        \n        data <- data.frame(\n          category = c(\"A\", \"B\", \"C\", \"D\"),\n          subcategory = c(\"A1\", \"B1\", \"C1\", \"D1\"),\n          value = c(10, 20, 30, 40)\n        )\n        \n        treemap(\n          data,\n          index = c(\"category\", \"subcategory\"),\n          vSize = \"value\",\n          title = \"Treemap Example\"\n        )\n```\n\n-   **Definition:** Visualizes hierarchical data using nested rectangles.\n\n-   **Pros:**\n\n    -   **Displays Large Amounts of Data Efficiently:**\n        -   Suitable for representing large hierarchical data sets.\n    -   **Intuitive for Showing Hierarchical Relationships:**\n        -   Clearly shows hierarchical relationships in a visual format.\n    -   **Highlights Patterns and Clusters Visually:**\n        -   Highlights patterns, clusters, and outliers effectively.\n\n-   **Cons:**\n\n    -   **Distorts Proportions if Sizes are Too Small:**\n        -   Smaller rectangles can become unreadable and distort proportions.\n    -   **Challenging to Interpret for High-Depth Hierarchies:**\n        -   Deep hierarchies can make interpretation challenging and confusing.\n\n**Summary:**\\\nTreemaps are excellent for visualizing hierarchical data efficiently and intuitively. However, careful design is crucial to avoid distortions and ensure interpretability, especially with deep hierarchies.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your categorical variable to the <code>X</code> axis.</li>\n\n<li>Drag your continuous variable to the <code>Y</code> axis.</li>\n\n<li>Select <code>Treemap</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a treemap in R\n        library(treemap)\n        \n        data <- data.frame(\n          category = c(\"A\", \"B\", \"C\", \"D\"),\n          subcategory = c(\"A1\", \"B1\", \"C1\", \"D1\"),\n          value = c(10, 20, 30, 40)\n        )\n        \n        treemap(\n          data,\n          index = c(\"category\", \"subcategory\"),\n          vSize = \"value\",\n          title = \"Treemap Example\"\n        )\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\nimport squarify\n\nlabels = [\"A\", \"B\", \"C\", \"D\"]\nsizes = [10, 20, 30, 40]\nsquarify.plot(sizes=sizes, label=labels, color=[\"blue\", \"green\", \"red\", \"purple\"], alpha=.7)\nplt.title(\"Treemap Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        GRAPH\n          /TREEMAP=VARIABLES(Category, Subcategory)\n          /VALUE=Value\n          /TITLE='Treemap Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        ssc install treemap\n        clear\n        set obs 4\n        generate category = _n\n        generate subcategory = category\n        generate value = 10 * category\n        treemap value, by(category subcategory) title(\"Treemap Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n## Advanced Graphs\n\n### Time Series Plots\n\n```{r, echo=FALSE, message=FALSE}\n       # Create a time series plot in R\n        time <- seq(from = as.Date(\"2022-01-01\"), by = \"month\", length.out = 12)\n        values <- rnorm(12, mean = 50, sd = 10)\n        plot(time, values, type = \"l\", main = \"Time Series Plot Example\")\n```\n\n-   **Definition:** Displays data trends over time.\n-   **Pros:**\n    -   Ideal for identifying trends, cycles, and seasonal patterns.\n    -   Supports multiple time series on the same graph.\n    -   Facilitates forecasting and future planning.\n-   **Cons:**\n    -   Less effective for non-temporal data.\n    -   Can suffer from overplotting with too many series.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Analyze</code> \\> <code> Specialized Modeling<code> \\> <code>Time Series</code>.</li>\n\n<li>Select your time variable and move it to the <code>X, Time ID</code> column.</li>\n\n<li>Select your response variable and move it to the <code>Y, Time Series </code> column.</li>\n\n<li>Click <code>OK</code>.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a time series plot in R\n        time <- seq(from = as.Date(\"2022-01-01\"), by = \"month\", length.out = 12)\n        values <- rnorm(12, mean = 50, sd = 10)\n        plot(time, values, type = \"l\", main = \"Time Series Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ntime = pd.date_range('2022-01-01', periods=12, freq='M')\nvalues = np.random.normal(50, 10, 12)\nplt.plot(time, values)\nplt.title(\"Time Series Plot Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        TSPLOT\n          /TIME=Date\n          /SERIES=Value\n          /TITLE='Time Series Plot Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 12\n        generate time = tq(2022q1)\n        generate value = rnormal(50, 10)\n        tsset time\n        tsline value, title(\"Time Series Plot Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Maps\n\n```{r, echo=FALSE, message=FALSE}\n# Create a map in R\n        library(ggplot2)\n        library(maps)\n\n        world_map <- map_data(\"world\")\n        ggplot(world_map, aes(x = long, y = lat, group = group)) +\n          geom_polygon(fill = \"lightblue\", color = \"white\") +\n          ggtitle(\"World Map Example\")\n```\n\n-   **Definition:** Visualizes geographic data by plotting locations on maps.\n-   **Pros:**\n    -   Provides spatial context to data.\n    -   Effective for highlighting geographic patterns.\n    -   Supports data aggregation at regional levels.\n-   **Cons:**\n    -   Interpretation can be misleading without proper scaling.\n    -   Requires geographic knowledge for accurate interpretation.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Graph</code> \\> <code>Graph Builder</code>.</li>\n\n<li>Drag your longitude and latitude variables to the <code>X</code> and <code>Y</code> axes, respectively.</li>\n\n<li>Select <code>Map</code> from the options.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Create a map in R\n        library(ggplot2)\n        library(maps)\n\n        world_map <- map_data(\"world\")\n        ggplot(world_map, aes(x = long, y = lat, group = group)) +\n          geom_polygon(fill = \"lightblue\", color = \"white\") +\n          ggtitle(\"World Map Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld.plot()\nplt.title(\"World Map Example\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        MAP\n          /MAPTYPE=world\n          /TITLE='World Map Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        ssc install spmap\n        clear\n        sysuse world\n        spmap using world_coordinates, title(\"World Map Example\")\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### Unstructured Text\n\n#### Word Cloud Example\n\n<!-- ```{r, echo=FALSE, message=FALSE} -->\n\n<!-- # Summarize unstructured text in R -->\n\n<!--         library(tm) -->\n\n<!--         library(wordcloud) -->\n\n<!--         text <- c(\"sepsis\", \"infection\", \"fever\", \"hospital\", \"antibiotics\",  -->\n\n<!--           \"bacteria\", \"blood\", \"severe\", \"septic shock\", \"intensive care\") -->\n\n<!--         # Repeat each word a random number of times -->\n\n<!--         text_repeated <- unlist(lapply(text, function(word) rep(word, sample(5:15, 1)))) -->\n\n<!--         corpus <- Corpus(VectorSource(text_repeated)) -->\n\n<!--         tdm <- TermDocumentMatrix(corpus) -->\n\n<!--         word_freq <- sort(rowSums(as.matrix(tdm)), decreasing = TRUE) -->\n\n<!--         wordcloud(names(word_freq), word_freq, scale = c(3, 0.5), colors = brewer.pal(8, \"Dark2\")) -->\n\n<!-- ``` -->\n\n-   **Definition:** Summarizes text data numerically to gain insights.\n-   **Pros:**\n    -   Extracts useful information from textual data.\n    -   Identifies patterns and trends in large text corpora.\n    -   Supports topic modeling and sentiment analysis.\n-   **Cons:**\n    -   Requires preprocessing to handle noise and inconsistencies.\n    -   Interpretation challenges due to language ambiguities.\n\n<details>\n\n<summary>JMP Instructions:</summary>\n\n<ul>\n\n<li>Go to <code>Analyze</code> \\> <code>Text Explorer</code>.</li>\n\n<li>Select your text variable and move it to the <code>Text</code> column.</li>\n\n<li>Click <code>OK</code>.</li>\n\n<li>Click the red triangle and select <code> Display Options <code> \\> <code> Show Word Cloud.</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>R Code Example:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        # Summarize unstructured text in R\n        library(tm)\n        library(wordcloud)\n\n        text <- c(\"word1\", \"word2\", \"word3\", \"word1\", \"word2\")\n        corpus <- Corpus(VectorSource(text))\n        tdm <- TermDocumentMatrix(corpus)\n        word_freq <- sort(rowSums(as.matrix(tdm)), decreasing = TRUE)\n        wordcloud(names(word_freq), word_freq, scale = c(3, 0.5), colors = brewer.pal(8, \"Dark2\"))\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>Python Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\ntext = \"word1 word2 word3 word1 word2\"\nwordcloud = WordCloud(scale=3, max_words=50, background_color='white').generate(text)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>SPSS Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        TEXTANALYSIS\n          /TEXT=Comments\n          /TITLE='Unstructured Text Analysis Example'.\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n<details>\n\n<summary>STATA Instructions:</summary>\n\n<ul>\n\n<li>\n\n```{=html}\n<pre>\n        clear\n        set obs 5\n        generate comments = \"word1 word2 word3 word1 word2\"\n        wordcloud comments, maxwords(50)\n      </pre>\n```\n</li>\n\n</ul>\n\n</details>\n\n### References\n\n1.  Tufte, Edward R. *The Visual Display of Quantitative Information*. Graphics Press, 2001.\n2.  Few, Stephen. *Now You See It: Simple Visualization Techniques for Quantitative Analysis*. Analytics Press, 2009.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"html","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"columns":12,"css":["../styles.css"],"output-file":"graphing-your-data.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":"journal","title":"Graphing Your Data","author":"Dr. Joshua Lambert","toc-title":"Table of Contents"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}